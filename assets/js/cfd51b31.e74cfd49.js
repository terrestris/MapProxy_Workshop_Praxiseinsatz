"use strict";(self.webpackChunkmapproxy_ws=self.webpackChunkmapproxy_ws||[]).push([[773],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=i,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={id:"config",title:"Konfiguration",sidebar_position:2,sidebar_label:"Konfiguration"},a="Konfiguration",s={unversionedId:"config/config",id:"config/config",title:"Konfiguration",description:"MapProxy wird mittels \xfcbersichtlicher yaml-Dateien konfiguriert, wobei ebenso eine JSON-Konfiguration g\xfcltig ist. S\xe4mtliche Beispiele in der Dokumentation sind in YAML beschrieben.",source:"@site/docs/config/README.md",sourceDirName:"config",slug:"/config/",permalink:"/MapProxy_Workshop_Praxiseinsatz/docs/config/",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"config",title:"Konfiguration",sidebar_position:2,sidebar_label:"Konfiguration"},sidebar:"tutorialSidebar",previous:{title:"Grids",permalink:"/MapProxy_Workshop_Praxiseinsatz/docs/introduction/grids"},next:{title:"Bausteine",permalink:"/MapProxy_Workshop_Praxiseinsatz/docs/config/bausteine"}},l={},c=[{value:"Seeding",id:"seeding",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"konfiguration"},"Konfiguration"),(0,i.kt)("p",null,"MapProxy wird mittels \xfcbersichtlicher yaml-Dateien konfiguriert, wobei ebenso eine JSON-Konfiguration g\xfcltig ist. S\xe4mtliche Beispiele in der Dokumentation sind in YAML beschrieben.",(0,i.kt)("br",{parentName:"p"}),"\n","Es sind Key-Value-Paare und Listen m\xf6glich:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"options-name: value"),(0,i.kt)("li",{parentName:"ul"},"[1,2,3]","\nWichtig zu beachten:"),(0,i.kt)("li",{parentName:"ul"},"korrekte Einr\xfcckung"),(0,i.kt)("li",{parentName:"ul"},"Leerzeichen nach Doppelpunkt"),(0,i.kt)("li",{parentName:"ul"},"Anf\xfchrungszeichen um Strings -> ",'["EPSG:4326"]')),(0,i.kt)("p",null,"Die zentrale Konfigurationsdatei ist die ",(0,i.kt)("inlineCode",{parentName:"p"},"mapproxy.yaml"),", nachfolgend ein Auszug aus einem Beispiel:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n  demo:\n  wms:\n    srs: ['EPSG:4326', 'EPSG:900913', 'EPSG:3857', 'EPSG:4258', 'EPSG:26915']\n    # image_formats: ['image/jpeg', 'image/png']\n    md:\n      # metadata used in capabilities documents\n      title: MapProxy WMS Proxy\n      abstract: This is the fantastic MapProxy.\n      online_resource: http://mapproxy.org/\n      contact:\n        person: Your Name Here\n        position: Technical Director\n      access_constraints:\n        This service is intended for private and evaluation use only.\n        The data is licensed as Creative Commons Attribution-Share Alike 2.0\n        (http://creativecommons.org/licenses/by-sa/2.0/)\n      fees: 'None'\n\nlayers:\n  - name: mapnik\n    title: World population (Mapnik)\n    sources: [mapnik]\n\ncaches:\n  mapnik_cache:\n    grids: [GLOBAL_MERCATOR]\n    sources: [tilestache]\n\nsources:\n  geoserver:\n    type: wms\n    wms_opts:\n      featureinfo: true\n    req:\n      url: http://localhost:8082/geoserver/wms?\n      layers: 'topp:states'\n      transparent: true\n    coverage:\n      bbox: -124.73142200000001,24.955967,-66.969849,49.371735\n      bbox_srs: 'EPSG:4326'\n\ngrids:\n  global_mercator_inverse:\n    base: GLOBAL_MERCATOR\n    origin: nw\n\n")),(0,i.kt)("h2",{id:"seeding"},"Seeding"),(0,i.kt)("p",null,"Neben dieser Haupt-Konfigurationsdatei wird oftmals eine Konfigurationsdatei f\xfcr eine ",(0,i.kt)("inlineCode",{parentName:"p"},"mapproxy-seed")," eingesetzt:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# ####################################s################################\n#               MapProxy example seed configuration\n# #####################################################################\n#\n# This is _not_ a runnable configuration, but it contains most\n# available options in meaningful combinations.\n#\n# Use this file in addition to the documentation to see where and how\n# things can be configured.\n\nseeds:\n  myseed1:\n    # seed all grids of this cache\n    caches: [osm_cache]\n    levels:\n      to: 10\n    refresh_before:\n      # re-generate tiles older than this date\n      time: 2013-10-10T12:35:00\n\n  myseed2:\n    # seed two caches, but only GLOBAL_GEODETIC grid\n    caches: [cache1, cache2]\n    grids: [GLOBAL_GEODETIC]\n    levels:\n      to: 14\n    refresh_before:\n      # re-generate tiles older than the modification time\n      # of this file. on linux/unix use `touch` to change the time.\n      mtime: ./reseed.time\n\ncleanups:\n  cleanup_older_tiles:\n    caches: [osm_cache]\n    remove_before:\n      days: 30\n    levels:\n        from: 16\n\n  remove_complete_levels:\n    caches: [cache1]\n    # remove all tiles regardless of the timestamp.\n    # will remove the complete level directory for `file` caches\n    remove_all: true\n    levels: [14, 18, 19, 20]\n\n  remove_changes:\n    caches: [cache1]\n    # be careful when using cleanup with coverages, since it needs to check\n    # every possible tile in this coverage (as reported by\n    # `mapproxy-util grids --coverage`). only use small coverages and/or limit\n    # levels\n    coverages: [changed_area]\n    # without remove_before: remove all tiles created before you called\n    # mapproxy-seed. i.e. tiles created before with in this seed run\n    # are not removed\n    levels:\n        from: 14\n        to: 17\n\ncoverages:\n  germany:\n    # any source supported by OGR\n    datasource: 'shps/world_boundaries_m.shp'\n    where: 'CNTRY_NAME = \"Germany\"'\n    srs: 'EPSG:3857'\n  austria:\n    # simple bbox\n    bbox: [9.36, 46.33, 17.28, 49.09]\n    srs: \"EPSG:4326\"\n  switzerland:\n    # text file with WKT (Multi)Polygons\n    datasource: 'polygons/SZ.txt'\n    srs: \"EPSG:3857\"\n  changed_area:\n    # example with PostGIS query\n    datasource: \"PG: dbname='db' host='host' user='user' password='password'\"\n    where: \"select * from last_changes\"\n    srs: 'EPSG:3857'\n")))}m.isMDXComponent=!0}}]);